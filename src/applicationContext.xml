<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:hdp="http://www.springframework.org/schema/hadoop"
        xmlns:aop="http://www.springframework.org/schema/aop" 
        xmlns:jaxws="http://cxf.apache.org/jaxws"
        xmlns:jaxrs="http://cxf.apache.org/jaxrs"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
         http://www.springframework.org/schema/tx  
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		 http://cxf.apache.org/jaxws
		 http://cxf.apache.org/schemas/jaxws.xsd
		 http://cxf.apache.org/jaxrs
         http://cxf.apache.org/schemas/jaxrs.xsd
         http://www.springframework.org/schema/hadoop http://www.springframework.org/schema/hadoop/spring-hadoop.xsd">
 
        <import resource="classpath:META-INF/cxf/cxf.xml" />
        <import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
        <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
        
        <context:annotation-config />
	    <context:component-scan base-package="com" />
	    
	    <!--获取jdbc配置文件 -->
			<bean
				class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
				<property name="locations">
				    <list>
					<value>classpath:jdbc.properties</value>
					</list>
				</property>
			</bean>
			
			
			 <!-- 配置数据库连接 -->
			 
		
			<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
				destroy-method="close">
				<property name="driverClassName" value="${jdbc.driverClassName}">
				</property>
				<property name="url" value="${jdbc.url}">
				</property>
				<property name="username" value="${jdbc.username}"></property>
				<property name="password" value="${jdbc.password}"></property>
				<!-- #最大连接数据库连接数,设 0 为没有限制 -->
				<property name="maxActive">
					<value>50</value>
				</property>
				<!-- #最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止。设 0 为没有限制  -->
				<property name="maxIdle">
					<value>20</value>
				</property>
				<!-- 最大等待毫秒数, 单位为 ms, 超过时间会出错误信息 -->
				<property name="maxWait">
					<value>1000</value>
				</property>
				<property name="defaultAutoCommit">
					<value>false</value>
				</property>
			</bean>
			<bean id="sessionFactory"
				class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
				<property name="dataSource">
					<ref bean="dataSource" />
				</property>
				<property name="packagesToScan">
					<list>
						<value>com.shundr.database.bean</value>
					</list>
				</property>
				<property name="hibernateProperties">
					<props>
						<prop key="hibernate.dialect">
							org.hibernate.dialect.MySQLDialect
						</prop>
						<prop key="hibernate.show_sql">true</prop>
						<prop key="hibernate.format_sql">true</prop>
					</props>
				</property>
				<property name="annotatedClasses">
					<list>					
					</list>
				</property></bean>
				
			<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
				<property name="sessionFactory" ref="sessionFactory"></property>
			</bean>
			

	
		
			
	
		<!-- 配置事务管理器 --> 
		 <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		  <property name="sessionFactory">
		       <ref bean="sessionFactory"/>
		  </property>
		 </bean>
		
		 <!-- 配置事务的传播特性 -->
		 <tx:advice id="txAdvice" transaction-manager="transactionManager">
		    <tx:attributes>
		     <tx:method name="add*" propagation="REQUIRED"/>
		     <tx:method name="delete*" propagation="REQUIRED"/>
		     <tx:method name="update*" propagation="REQUIRED"/>
		     <tx:method name="save*" propagation="REQUIRED"/>
		     <tx:method name="get*" propagation="REQUIRED"/>
		     <tx:method name="*" read-only="true"/>
		    </tx:attributes>
		 </tx:advice>
		
		 
		 <!-- 那些类的哪些方法参与事务 -->
		 <!-- 
				定义哪些方法参与事务
				expression="execution(* com.tree.*.service.*.*(..))
				第一个*代表 返回值类型是所有。
				com.tree.*.service 代表在这个包下的类，第二个*代表中间模糊匹配。
				第三个* 代表类的名称是所有类。
				第四个* 代表类中的方法名称。
				(..)代表参数不限制。
			 -->
		 
		 <aop:config>
		    <aop:pointcut id="allManagerMethod" expression="execution(* com.shundr.database.dao.*.*(..))"/>
		    <aop:advisor pointcut-ref="allManagerMethod" advice-ref="txAdvice"/>
		 </aop:config>
        
       
       <!-- 这里的地址很重要，客户端需要通过这个地址来访问WebService -->
		<jaxrs:server id="BasicService" address="/service">		
		    <jaxrs:serviceBeans>		
		        <ref bean="basicServiceImpl" />		
		    </jaxrs:serviceBeans>
		
		    <jaxrs:extensionMappings>		
		        <entry key="json" value="application/json" />		
		        <entry key="xml" value="application/xml" />	
		        <entry key="jsonp" value="application/javascript" />		
		    </jaxrs:extensionMappings>
		
		    <jaxrs:languageMappings>		
		           <entry key="en" value="en-gb"/>		
		    </jaxrs:languageMappings>	
		    
		    
		    <jaxrs:inInterceptors>		    
			       <bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpInInterceptor">
			          <property name="callbackParam" value="_jsonp"/>
			       </bean>	       
		    </jaxrs:inInterceptors>
		    
			<jaxrs:outInterceptors>
			       <bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPreStreamInterceptor">
			           <property name="mediaType" value="text/x+javascript"/>
			       </bean>
			       
			       <bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPostStreamInterceptor">
			           <!-- default is ');' -->
			         <property name="paddingEnd" value=")"/>
			       </bean>
			  </jaxrs:outInterceptors>
			  
			
			    <jaxrs:providers>
				
				   <bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider">
				   	<property name="mapper" ref="customJsonMapper"></property>
				   </bean>
				   
				</jaxrs:providers>
		     	
		</jaxrs:server>
		
		
		     <!-- 这里的地址很重要，客户端需要通过这个地址来访问WebService -->
		<jaxrs:server id="FileService" address="/file">		
		    <jaxrs:serviceBeans>		
		        <ref bean="fileServiceImpl" />		
		    </jaxrs:serviceBeans>
		
		    <jaxrs:extensionMappings>		
		        <entry key="json" value="application/json" />		
		        <entry key="xml" value="application/xml" />	
		        <entry key="jsonp" value="application/javascript" />		
		    </jaxrs:extensionMappings>
		
		    <jaxrs:languageMappings>		
		           <entry key="en" value="en-gb"/>		
		    </jaxrs:languageMappings>	
		    
		    
		</jaxrs:server>

</beans>